Delegates (C# Programming Guide)
 
A delegate is a type that represents references to methods with a particular parameter list
and return type. When you instantiate a delegate, you can associate its instance with any
method with a compatible signature and return type. You can invoke (or call) the method through
the delegate instance.

Delegates are used to pass methods as arguments to other methods. Event handlers are nothing
more than methods that are invoked through delegates. You create a custom method, and a class
such as a windows control can call your method when a certain event occurs. The following
example shows a delegate declaration:

C#
public delegate int PerformCalculation(int x, int y);

Any method from any accessible class or struct that matches the delegate type can be assigned
to the delegate. The method can be either static or an instance method. This makes it possible
to programmatically change method calls, and also plug new code into existing classes.

In the context of method overloading, the signature of a method does not include the return value.
But in the context of delegates, the signature does include the return value. In other words, a 
method must have the same return type as the delegate.

This ability to refer to a method as a parameter makes delegates ideal for defining callback methods.
For example, a reference to a method that compares two objects could be passed as an argument to a 
sort algorithm. Because the comparison code is in a separate procedure, the sort algorithm can be
written in a more general way.

Delegates Overview
Delegates have the following properties:
	- Delegates are like C++ function pointers but are type safe.
		(delegats giống như chức năng con trỏ trong C++ nhưng là kiểu an toàn)
	- Delegates allow methods to be passed as parameters.
		(delegates cho phép phương thức được đưa vào như là các tham số);
	- Delegates can be used to define callback methods.
		(delegates có thể được sử dụng để định nghĩa phương thức callback)
	- Delegates can be chained together; for example, multiple methods can be called on a single event.
		(delegates có thể được kết nối với nhau, nhiều phương thức có thể được gọi trong cùng một sự kiện)
	- Methods do not have to match the delegate type exactly. For more information,
	  see Using Variance in Delegates (C# and Visual Basic).
	- C# version 2.0 introduced the concept of Anonymous Methods, which allow code blocks to be 
	  passed as parameters in place of a separately defined method. C# 3.0 introduced lambda 
	  expressions as a more concise way of writing inline code blocks. Both anonymous methods and
	  lambda expressions (in certain contexts) are compiled to delegate types. Together,
	  these features are now known as anonymous functions.
	  For more information about lambda expressions, see Anonymous Functions (C# Programming Guide).